import sys
import os
import requests
import psycopg2
from flask import Flask, request, jsonify
import openai

sys.stdout.reconfigure(encoding='utf-8')  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É UTF-8

app = Flask(name)

# üîë –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
DB_USER = "worker1"
DB_PASSWORD = "HxwV52HjFiJ6jIE9QsSzB5GSuxDATlwr"
DB_NAME = "mydatabase_o3vx"
DB_HOST = "dpg-cvdtb452ng1s73cajrp0-a.oregon-postgres.render.com"
DB_PORT = 5432

# üõ† –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    return psycopg2.connect(
        dbname=DB_NAME,
        user=DB_USER,
        password=DB_PASSWORD,
        host=DB_HOST,
        port=DB_PORT
    )

# üî• OpenAI API
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not OPENAI_API_KEY:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    
openai.api_key = OPENAI_API_KEY

# üìå –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI
def send_to_openai(user_message, thread_id=None):
    if thread_id:
        response = openai.beta.threads.messages.create(
            thread_id=thread_id,
            role="user",
            content=user_message
        )
    else:
        thread = openai.beta.threads.create()
        thread_id = thread.id
        response = openai.beta.threads.messages.create(
            thread_id=thread_id,
            role="user",
            content=user_message
        )
    return thread_id, response

# üìå API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
@app.route("/message", methods=["POST"])
def receive_message():
    try:
        data = request.json
        telegram_id = data.get("telegram_id")
        user_message = data.get("message")

        if not telegram_id or not user_message:
            return jsonify({"error": "–ù–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ"}), 400

        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute("SELECT thread_id FROM users_threads WHERE telegram_id = %s;", (telegram_id,))
        thread = cursor.fetchone()

        if thread:
            thread_id = thread[0]
        else:
            thread_id, _ = send_to_openai(user_message)
            cursor.execute("INSERT INTO users_threads (telegram_id, thread_id) VALUES (%s, %s);",
                           (telegram_id, thread_id))
            conn.commit()

        _, response = send_to_openai(user_message, thread_id)

        reply_text = response.content[0].text if response and response.content else "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞"

        cursor.close()
        conn.close()

        return jsonify({"reply": reply_text})

    except Exception as e:
        return jsonify({"error": str(e)}), 500

# üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if name == "main":
    app.run(host="0.0.0.0", port=5000)
