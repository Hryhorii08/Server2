import sys
import os
import time
import requests
import psycopg2
from flask import Flask, request, jsonify
import openai

sys.stdout.reconfigure(encoding='utf-8')  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É UTF-8

app = Flask(__name__)

# üîë –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
DB_USER = "worker1"
DB_PASSWORD = "HxwV52HjFiJ6jIE9QsSzB5GSuxDATlwr"
DB_NAME = "mydatabase_o3vx"
DB_HOST = "dpg-cvdtb452ng1s73cajrp0-a.oregon-postgres.render.com"
DB_PORT = 5432  

def get_db_connection():
    print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    return psycopg2.connect(
        dbname=DB_NAME,
        user=DB_USER,
        password=DB_PASSWORD,
        host=DB_HOST,
        port=DB_PORT
    )

# üî• OpenAI API
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ASSISTANT_ID = "asst_4Jfbku9f3nTAJqcsyoCf9MGW"
openai.api_key = OPENAI_API_KEY

# ‚úÖ –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
def format_text(text):
    return text.replace("\\n", "\n").strip()

# üìå –†–∞–±–æ—Ç–∞ —Å OpenAI
def send_to_openai(user_message, thread_id=None):
    print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ OpenAI: {user_message}, thread_id: {thread_id}")

    if not thread_id:
        thread = openai.beta.threads.create()
        thread_id = thread.id
        print(f"üÜï –ù–æ–≤—ã–π —Ç—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω: {thread_id}")

    # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = openai.beta.threads.messages.create(
        thread_id=thread_id,
        role="user",
        content=user_message
    )
    print(f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message.id}")

    time.sleep(2)

    # 2. –ó–∞–ø—É—Å–∫–∞–µ–º Run
    run = openai.beta.threads.runs.create(
        thread_id=thread_id,
        assistant_id=ASSISTANT_ID
    )
    print(f"üöÄ Run –∑–∞–ø—É—â–µ–Ω: {run.id}")

    # 3. –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è Run
    while True:
        run_status = openai.beta.threads.runs.retrieve(thread_id=thread_id, run_id=run.id)
        if run_status.status == "completed":
            print("‚úÖ Run –∑–∞–≤–µ—Ä—à–µ–Ω")
            break
        elif run_status.status in ["failed", "cancelled"]:
            print("‚ùå Run –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
            return thread_id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"
        time.sleep(1)

    time.sleep(2)

    # 4. –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    messages = openai.beta.threads.messages.list(thread_id=thread_id)

    assistant_reply = next(
        (msg for msg in reversed(messages.data) if msg.role == "assistant"),
        None
    )

    if assistant_reply and assistant_reply.content:
        last_message_data = assistant_reply.content
        if isinstance(last_message_data, list):
            # ‚úÖ –ß–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ part.text.value, –±–µ–∑ Text(...)
            last_message = "\n".join([
                part.text.value for part in last_message_data
                if hasattr(part, "text") and hasattr(part.text, "value")
            ])
        else:
            last_message = str(last_message_data)
    else:
        last_message = "–û—à–∏–±–∫–∞: –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª"

    # ‚úÖ –ü—Ä–∏–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –∫ —á–∏—Ç–∞–µ–º–æ–º—É –≤–∏–¥—É
    last_message = last_message.encode("utf-8").decode("utf-8")
    last_message = format_text(last_message)

    print(f"üì© –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:\n{last_message}")

    return thread_id, last_message

# üì• POST endpoint
@app.route("/message", methods=["POST"])
def receive_message():
    data = request.json
    print(f"üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {data}")

    telegram_id = data.get("telegram_id")
    user_message = data.get("message")

    if not telegram_id or not user_message:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ")
        return jsonify({"error": "–ù–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ"}), 400

    conn = get_db_connection()
    cursor = conn.cursor()

    # –ò—â–µ–º thread_id
    cursor.execute("SELECT thread_id FROM users_threads WHERE telegram_id = %s;", (telegram_id,))
    thread = cursor.fetchone()

    if thread:
        thread_id = thread[0]
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω thread_id: {thread_id}")
    else:
        thread_id, _ = send_to_openai(user_message)
        cursor.execute(
            "INSERT INTO users_threads (telegram_id, thread_id) VALUES (%s, %s);",
            (telegram_id, thread_id)
        )
        conn.commit()
        print(f"üÜï –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –Ω–æ–≤—ã–π thread_id: {thread_id}")

    _, reply = send_to_openai(user_message, thread_id)

    cursor.close()
    conn.close()

    return jsonify({"reply": reply})

# üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    print("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://127.0.0.1:5000")
    app.run(host="0.0.0.0", port=5000, debug=True)
